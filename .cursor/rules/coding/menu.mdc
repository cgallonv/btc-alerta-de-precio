# Menu and Main Feature Creation Guidelines

## 1. Component Structure
- All new menus and main features must be implemented as partial templates in `web/templates/partials/`.
- For a new main feature (e.g., alerts, notifications, user profile):
  - Extract reusable UI parts (lists, forms, modals) into their own partials (e.g., `alerts_list.html`, `alerts_form.html`).
  - The main page template (e.g., `alerts.html`) should include these partials and handle layout.
- Use the `top_bar` partial for global navigation and the `hamburger_menu` partial for mobile/responsive navigation.

## 2. Frontend Integration
- Include partials in page templates using Go template syntax: `{{ template "partial_name" . }}`
- Place the main feature partials in the appropriate location in the DOM for accessibility and layout.
- Ensure all partials are registered in the backend template loader (see `handlers.go`).

## 3. Styling and Responsiveness
- Use existing CSS classes and variables for colors, spacing, and typography.
- All features and menus must be fully responsive and accessible (keyboard navigation, ARIA labels).
- Hamburger menu must always be present and functional on mobile.

## 4. JavaScript Behavior
- Feature-specific JS should only run on pages where the feature is present (check for relevant DOM elements before running logic).
- Menu open/close logic must be handled in a dedicated JS function.
- Avoid global variables; encapsulate feature logic.
- If the feature interacts with backend data, use async API calls and handle loading/error states gracefully.

## 5. Backend Handlers
- For features that require dynamic data (e.g., alerts, notifications), create dedicated backend handlers in `internal/api/handlers.go`.
- Use RESTful endpoints and return JSON for feature-related data.
- Ensure all endpoints are secure and respect user authentication/authorization.

## 6. Testing and Documentation
- Add unit tests for backend handlers.
- Add integration tests for feature rendering and behavior.
- Document the feature’s structure, usage, and integration steps in the project’s documentation.

## 7. Code Review Checklist
- [ ] Feature is implemented as partial(s) and included in the main page template.
- [ ] Feature is included in all relevant pages.
- [ ] Feature is responsive and accessible.
- [ ] JavaScript logic is encapsulated and only runs where needed.
- [ ] Backend handlers are secure and tested.
- [ ] Documentation is updated.

## Example: Adding an Alerts Feature
1. Create `alerts_list.html` and `alerts_form.html` in `web/templates/partials/`.
2. In `alerts.html`, include the partials:
   ```go
   {{ template "alerts_form" . }}
   {{ template "alerts_list" . }}
   ```
3. Register the new partials in the template loader in `handlers.go`.
4. Add backend handlers for alerts in `internal/api/handlers.go`.
5. Add JS logic for alerts, but only run it if the relevant DOM elements exist.
6. Add tests and update documentation.
description:
globs:
alwaysApply: false
---

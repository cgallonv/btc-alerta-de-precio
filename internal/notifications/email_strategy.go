package notifications

import (
	"crypto/tls"
	"fmt"

	"btc-alerta-de-precio/config"
	"btc-alerta-de-precio/internal/errors"
	"btc-alerta-de-precio/internal/storage"

	"gopkg.in/gomail.v2"
)

// EmailStrategy implements email notifications
type EmailStrategy struct {
	config *config.Config
}

// NewEmailStrategy creates a new email notification strategy
func NewEmailStrategy(cfg *config.Config) *EmailStrategy {
	return &EmailStrategy{
		config: cfg,
	}
}

// Send sends an email notification
func (e *EmailStrategy) Send(data *NotificationData) error {
	if e.config.SMTPUsername == "" || e.config.SMTPPassword == "" {
		return errors.NewAppError("EMAIL_CONFIG_MISSING", "SMTP credentials not configured")
	}

	m := gomail.NewMessage()
	m.SetHeader("From", e.config.FromEmail)
	m.SetHeader("To", data.Alert.Email)
	m.SetHeader("Subject", data.Title)

	// Create HTML email body
	htmlBody := e.generateHTMLBody(data)
	m.SetBody("text/html", htmlBody)

	// Configure SMTP dialer
	d := gomail.NewDialer(e.config.SMTPHost, e.config.SMTPPort, e.config.SMTPUsername, e.config.SMTPPassword)
	d.TLSConfig = &tls.Config{InsecureSkipVerify: true}

	if err := d.DialAndSend(m); err != nil {
		return errors.WrapError(err, "EMAIL_SEND_ERROR", "Failed to send email notification")
	}

	return nil
}

// IsEnabled checks if email notifications are enabled for this alert
func (e *EmailStrategy) IsEnabled(alert *storage.Alert) bool {
	return e.config.EnableEmailNotifications && alert.EnableEmail && alert.Email != ""
}

// GetChannelName returns the channel name for this strategy
func (e *EmailStrategy) GetChannelName() string {
	return "email"
}

// generateHTMLBody creates the HTML email body
func (e *EmailStrategy) generateHTMLBody(data *NotificationData) string {
	return fmt.Sprintf(`
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>%s</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background-color: #f4f4f4; }
        .container { max-width: 600px; margin: 0 auto; background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
        .header { background-color: #f7931a; color: white; padding: 20px; text-align: center; border-radius: 8px 8px 0 0; margin: -20px -20px 20px -20px; }
        .price { font-size: 2em; font-weight: bold; color: #f7931a; text-align: center; margin: 20px 0; }
        .message { font-size: 1.1em; line-height: 1.6; margin: 20px 0; }
        .alert-info { background-color: #f8f9fa; padding: 15px; border-left: 4px solid #f7931a; margin: 20px 0; }
        .footer { text-align: center; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; color: #666; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸš¨ Bitcoin Price Alert</h1>
        </div>
        
        <div class="price">$%.2f USD</div>
        
        <div class="message">%s</div>
        
        <div class="alert-info">
            <strong>Alert:</strong> %s<br>
            <strong>Triggered:</strong> %s
        </div>
        
        <div class="footer">
            <p>This alert was generated by BTC Price Alert</p>
            <p>To manage your alerts, visit your control panel.</p>
        </div>
    </div>
</body>
</html>
	`, data.Title, data.Price, data.Message, data.Alert.GetDescription(), data.Alert.Name)
}
